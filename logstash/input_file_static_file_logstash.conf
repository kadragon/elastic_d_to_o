# logstash -f "input_file_static_file_logstash.conf" --log.level error
input {
    file {
        path => "/Users/kdo/Dev/elasticsearch/elastic_d_to_o/logstash/example/filter-example.log"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        codec => "plain" 
    }
}

filter {
    dissect {
        mapping => {"message" => "[%{timestamp}]%{?->}[%{id}] %{ip} %{+ip} [%{level}] - %{}."}
    }

    # if [level] == "INFO" {
    #     drop { }
    # }
    # else if [level] == "warn" {
    #     mutate {
    #         remove_field => ["ip", "timestamp", "level"]
    #     }
    # }

    # grok {
    #     pattern_definitions => {"MY_TIMESTAMP" => "%{YEAR}[/-]%{MONTHNUM}[/-]%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?"}
    #     match => {"message" => "\[%{MY_TIMESTAMP:timestamp}\] [ ]*\[%{DATA:id}\] %{IP:ip} %{NUMBER:port:int} \[%{LOGLEVEL:level}\] \- %{DATA:msg}\."}
    # }
    
    mutate {
    #     split => { "message" => " " }
    #     add_field => { "id" => "%{[message][2]}" }
    #     remove_field => "message"
        uppercase => ["level"]
        strip => "timestamp"
    #     # coerce - rename - update - replace - convert - gsub - uppercase
    #     # capitalize - lowercase - strip - remove - split - join - merge - copy
    }

    date {
        match => [ "timestamp", "YYYY-MM-dd HH:mm", "yyyy-MM-dd HH:mm:ss" ]
        target => "timestamp"
        timezone => "UTC"
    }
}

output {
    stdout { 
        codec => "json"
    }
    file {
        path => "/Users/kdo/Dev/elasticsearch/elastic_d_to_o/logstash/example/output.json"
    }
    elasticsearch {
        hosts => ["localhost:9200"]
        user => "elastic"
        password => "PASSWORD"
        index => "output"
    }
}